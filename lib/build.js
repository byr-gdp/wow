#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const readMarkdownDirectory = require('../lib/utils/readMarkdownDirectory');
const createDirIfNeeded = require('../lib/utils/createDirIfNeeded');
const compileTemplate = require('../lib/template/compileTemplate');
const cleanDir = require('../lib/utils/cleanDir');

/**
 * markdown 文件构建生成 html
 * @param {Sring} sourceDir 源文件目录绝对路径
 * @param {String} outputDir 输出目录绝对路径
 */
function build(sourceDir, outputDir) {
  const makrdownDirAbsolutePath = path.resolve(process.cwd(), sourceDir);
  const outputDirAbsolutePath = path.resolve(process.cwd(), outputDir);

  cleanDir(outputDirAbsolutePath);
  createDirIfNeeded(makrdownDirAbsolutePath);
  createDirIfNeeded(outputDirAbsolutePath);

  const fileMap = readMarkdownDirectory(makrdownDirAbsolutePath);
  const articles = Object.keys(fileMap).map(file => {
    const relativePath = path.relative(makrdownDirAbsolutePath, file);
    return relativePath.replace('.md', '.html').replace(/\//g, '_'); // 将 a/b/c.html 转换程 a_b_c.html。避免同名文件构建时被覆盖问题。但只限于 / 分割，Windows 可能存在问题。
  });

  // 将 markdown 转换成 html 并写入文件
  Object.keys(fileMap).forEach((file) => {
    // 假设所有文件以 .md 结尾，且文件命名除后缀外没有 '.'

    // 根据 file 路径获取文件名
    const relativePath = path.relative(makrdownDirAbsolutePath, file);
    const filename = relativePath.replace('.md', '.html').replace(/\//g, '_');

    const html = fileMap[file];
    const data = {
      html,
      articles,
    };

    const outputFileAbsolutePath = path.resolve(outputDirAbsolutePath, filename);
    fs.writeFileSync(outputFileAbsolutePath, compileTemplate(data), {
      encoding: 'utf8'
    });
  });

  // 如果没有 index.md 则自动生成兜底页面
  if (!articles.includes('index.html')) {
    const data = {
      html: '<h1>Welcome</h1><p>This is generated by Wow.</p>',
      articles,
    };

    const filename = 'index.html';
    const outputFileAbsolutePath = path.resolve(outputDirAbsolutePath, filename);
    fs.writeFileSync(outputFileAbsolutePath, compileTemplate(data), {
      encoding: 'utf8'
    });
  }
}

module.exports = exports = build;
